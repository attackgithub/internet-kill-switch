//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InternetKillSwitchApplication.KillSwitch {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NetworkAdapterCustom", Namespace="http://schemas.datacontract.org/2004/07/InternetKillSwitchService.Data")]
    [System.SerializableAttribute()]
    public partial class NetworkAdapterCustom : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private InternetKillSwitchApplication.KillSwitch.NetworkAdapterCategory CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConnectionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint ConnectionStatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InternetKillSwitchApplication.KillSwitch.NetworkAdapterCategory Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((this.CategoryField.Equals(value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionName {
            get {
                return this.ConnectionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionNameField, value) != true)) {
                    this.ConnectionNameField = value;
                    this.RaisePropertyChanged("ConnectionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint ConnectionStatus {
            get {
                return this.ConnectionStatusField;
            }
            set {
                if ((this.ConnectionStatusField.Equals(value) != true)) {
                    this.ConnectionStatusField = value;
                    this.RaisePropertyChanged("ConnectionStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NetworkAdapterCategory", Namespace="http://schemas.datacontract.org/2004/07/InternetKillSwitchService.Data")]
    public enum NetworkAdapterCategory : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Local = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Vpn = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="KillSwitch.IKillSwitchService")]
    public interface IKillSwitchService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKillSwitchService/NetworkChangeOnNetworkAvailabilityChanged", ReplyAction="http://tempuri.org/IKillSwitchService/NetworkChangeOnNetworkAvailabilityChangedRe" +
            "sponse")]
        void NetworkChangeOnNetworkAvailabilityChanged();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKillSwitchService/GetSimplifiedNetworkAdapters", ReplyAction="http://tempuri.org/IKillSwitchService/GetSimplifiedNetworkAdaptersResponse")]
        InternetKillSwitchApplication.KillSwitch.NetworkAdapterCustom[] GetSimplifiedNetworkAdapters();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKillSwitchService/DisableNetworkAdapter", ReplyAction="http://tempuri.org/IKillSwitchService/DisableNetworkAdapterResponse")]
        bool DisableNetworkAdapter(InternetKillSwitchApplication.KillSwitch.NetworkAdapterCustom o);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKillSwitchService/EnableNetworkAdapter", ReplyAction="http://tempuri.org/IKillSwitchService/EnableNetworkAdapterResponse")]
        bool EnableNetworkAdapter(InternetKillSwitchApplication.KillSwitch.NetworkAdapterCustom o);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKillSwitchService/GetIpAddress", ReplyAction="http://tempuri.org/IKillSwitchService/GetIpAddressResponse")]
        string GetIpAddress();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKillSwitchService/EnableAllLocal", ReplyAction="http://tempuri.org/IKillSwitchService/EnableAllLocalResponse")]
        void EnableAllLocal();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKillSwitchService/EnableAllVpn", ReplyAction="http://tempuri.org/IKillSwitchService/EnableAllVpnResponse")]
        void EnableAllVpn();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKillSwitchService/DisableAllLocal", ReplyAction="http://tempuri.org/IKillSwitchService/DisableAllLocalResponse")]
        void DisableAllLocal();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKillSwitchService/DisableAllVpn", ReplyAction="http://tempuri.org/IKillSwitchService/DisableAllVpnResponse")]
        void DisableAllVpn();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKillSwitchService/AddVpnAdapters", ReplyAction="http://tempuri.org/IKillSwitchService/AddVpnAdaptersResponse")]
        void AddVpnAdapters(InternetKillSwitchApplication.KillSwitch.NetworkAdapterCustom[] adapters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKillSwitchService/AddLocalAdapters", ReplyAction="http://tempuri.org/IKillSwitchService/AddLocalAdaptersResponse")]
        void AddLocalAdapters(InternetKillSwitchApplication.KillSwitch.NetworkAdapterCustom[] adapters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKillSwitchService/RemoveVpnAdapters", ReplyAction="http://tempuri.org/IKillSwitchService/RemoveVpnAdaptersResponse")]
        void RemoveVpnAdapters(InternetKillSwitchApplication.KillSwitch.NetworkAdapterCustom[] adapters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKillSwitchService/RemoveLocalAdapters", ReplyAction="http://tempuri.org/IKillSwitchService/RemoveLocalAdaptersResponse")]
        void RemoveLocalAdapters(InternetKillSwitchApplication.KillSwitch.NetworkAdapterCustom[] adapters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKillSwitchService/IsPaused", ReplyAction="http://tempuri.org/IKillSwitchService/IsPausedResponse")]
        bool IsPaused();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKillSwitchService/SetPaused", ReplyAction="http://tempuri.org/IKillSwitchService/SetPausedResponse")]
        void SetPaused();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKillSwitchService/SetUnpaused", ReplyAction="http://tempuri.org/IKillSwitchService/SetUnpausedResponse")]
        void SetUnpaused();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IKillSwitchServiceChannel : InternetKillSwitchApplication.KillSwitch.IKillSwitchService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KillSwitchServiceClient : System.ServiceModel.ClientBase<InternetKillSwitchApplication.KillSwitch.IKillSwitchService>, InternetKillSwitchApplication.KillSwitch.IKillSwitchService {
        
        public KillSwitchServiceClient() {
        }
        
        public KillSwitchServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public KillSwitchServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KillSwitchServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KillSwitchServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void NetworkChangeOnNetworkAvailabilityChanged() {
            base.Channel.NetworkChangeOnNetworkAvailabilityChanged();
        }
        
        public InternetKillSwitchApplication.KillSwitch.NetworkAdapterCustom[] GetSimplifiedNetworkAdapters() {
            return base.Channel.GetSimplifiedNetworkAdapters();
        }
        
        public bool DisableNetworkAdapter(InternetKillSwitchApplication.KillSwitch.NetworkAdapterCustom o) {
            return base.Channel.DisableNetworkAdapter(o);
        }
        
        public bool EnableNetworkAdapter(InternetKillSwitchApplication.KillSwitch.NetworkAdapterCustom o) {
            return base.Channel.EnableNetworkAdapter(o);
        }
        
        public string GetIpAddress() {
            return base.Channel.GetIpAddress();
        }
        
        public void EnableAllLocal() {
            base.Channel.EnableAllLocal();
        }
        
        public void EnableAllVpn() {
            base.Channel.EnableAllVpn();
        }
        
        public void DisableAllLocal() {
            base.Channel.DisableAllLocal();
        }
        
        public void DisableAllVpn() {
            base.Channel.DisableAllVpn();
        }
        
        public void AddVpnAdapters(InternetKillSwitchApplication.KillSwitch.NetworkAdapterCustom[] adapters) {
            base.Channel.AddVpnAdapters(adapters);
        }
        
        public void AddLocalAdapters(InternetKillSwitchApplication.KillSwitch.NetworkAdapterCustom[] adapters) {
            base.Channel.AddLocalAdapters(adapters);
        }
        
        public void RemoveVpnAdapters(InternetKillSwitchApplication.KillSwitch.NetworkAdapterCustom[] adapters) {
            base.Channel.RemoveVpnAdapters(adapters);
        }
        
        public void RemoveLocalAdapters(InternetKillSwitchApplication.KillSwitch.NetworkAdapterCustom[] adapters) {
            base.Channel.RemoveLocalAdapters(adapters);
        }
        
        public bool IsPaused() {
            return base.Channel.IsPaused();
        }
        
        public void SetPaused() {
            base.Channel.SetPaused();
        }
        
        public void SetUnpaused() {
            base.Channel.SetUnpaused();
        }
    }
}
